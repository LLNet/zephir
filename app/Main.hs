-- Copyright (c) 2013-2019 Zephir Team
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}

import qualified Turtle
import Prelude hiding (FilePath)
import Filesystem.Path.CurrentOS as Path

import qualified Data.Aeson as JSON
import Data.Aeson ((.=), (.:))

import Options.Applicative
import Data.Semigroup ((<>))

import Control.Monad
import Data.Traversable
import Data.Maybe
import Data.List

import qualified Data.Text as T
import qualified Data.Text.Encoding as T.Encoding
import qualified Data.ByteString.Lazy as B

import qualified System.Console.ANSI as ANSI

zpProgHeader :: String
zpProgHeader = "Zephir 1.0.0"

showHelpOnErrorExecParser :: ParserInfo a -> IO a
showHelpOnErrorExecParser = customExecParser (prefs showHelpOnError)

data Command =
    CommandApi       |
    CommandBuild     |
    CommandClean     |
    CommandFullclean |
    CommandGenerate  |
    CommandCompile   |
    CommandInit      |
    CommandInstall   |
    CommandStubs     deriving (Show)

main :: IO ()
main = do
    command <- showHelpOnErrorExecParser (info (helper <*> parseCommand)
        (fullDesc  <> header zpProgHeader))
    run command

parseApiCommand :: Parser Command
parseApiCommand = pure CommandApi

parseBuildCommand :: Parser Command
parseBuildCommand = pure CommandBuild

parseCleanCommand :: Parser Command
parseCleanCommand = pure CommandClean

parseFullcleanCommand :: Parser Command
parseFullcleanCommand = pure CommandFullclean

parseGenerateCommand :: Parser Command
parseGenerateCommand = pure CommandGenerate

parseCompileCommand :: Parser Command
parseCompileCommand = pure CommandCompile

parseInitCommand :: Parser Command
parseInitCommand = pure CommandInit

parseInstallCommand :: Parser Command
parseInstallCommand = pure CommandInstall

parseStubsCommand :: Parser Command
parseStubsCommand = pure CommandStubs

parseCommand :: Parser Command
parseCommand = subparser $
    command "api"
        (info (helper <*> parseApiCommand)
        (fullDesc <> progDesc "Generates a HTML API based on the classes exposed in the extension"))
    <>
    command "build"
        (info (helper <*> parseBuildCommand)
        (fullDesc <> progDesc "Generates/Compiles/Installs a Zephir extension"))
    <>
    command "clean"
        (info (helper <*> parseCleanCommand)
        (fullDesc <> progDesc "Cleans any object files created by the extension"))
    <>
    command "fullclean"
        (info (helper <*> parseFullcleanCommand)
        (fullDesc <> progDesc "Cleans any object files created by the extension (including files generated by phpize)"))
    <>
    command "generate"
        (info (helper <*> parseGenerateCommand)
        (fullDesc <> progDesc "Generates C code from the Zephir code without compiling it"))
    <>
    command "compile"
        (info (helper <*> parseCompileCommand)
        (fullDesc <> progDesc "Compile a Zephir extension"))
    <>
    command "init"
        (info (helper <*> parseInitCommand)
        (fullDesc <> progDesc "Initializes a Zephir extension"))
    <>
    command "install"
        (info (helper <*> parseInstallCommand)
        (fullDesc <> progDesc "Installs the extension in the extension directory (may require root password)"))
    <>
    command "stubs"
        (info (helper <*> parseStubsCommand)
        (fullDesc <> progDesc "Generates stubs that can be used in a PHP IDE"))

runApi :: IO ()
runApi = putStrLn "The stub for the 'zephir api' command"

runBuild :: IO ()
runBuild = putStrLn "The stub for the 'zephir build' command"

runClean :: IO ()
runClean = putStrLn "The stub for the 'zephir clean' command"

runFullclean :: IO ()
runFullclean = putStrLn "The stub for the 'zephir fullclean' command"

runGenerate :: IO ()
runGenerate = putStrLn "The stub for the 'zephir generate' command"

runCompile :: IO ()
runCompile = putStrLn "The stub for the 'zephir compile' command"

runInit :: IO ()
runInit = putStrLn "The stub for the 'zephir init' command"

runInstall :: IO ()
runInstall = putStrLn "The stub for the 'zephir install' command"

runStubs :: IO ()
runStubs = putStrLn "The stub for the 'zephir stubs' command"

run :: Command -> IO ()
run command =
    case command of
        CommandApi -> runApi
        CommandBuild -> runBuild
        CommandClean -> runClean
        CommandFullclean -> runFullclean
        CommandGenerate -> runGenerate
        CommandCompile -> runCompile
        CommandInit -> runInit
        CommandInstall -> runInstall
        CommandStubs -> runStubs
